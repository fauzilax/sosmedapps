// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	contents "sosmedapps/features/contents"

	mock "github.com/stretchr/testify/mock"
)

// ContentData is an autogenerated mock type for the ContentData type
type ContentData struct {
	mock.Mock
}

// AddContent provides a mock function with given fields: userID, newContent
func (_m *ContentData) AddContent(userID uint, newContent contents.CoreContent) (contents.CoreContent, error) {
	ret := _m.Called(userID, newContent)

	var r0 contents.CoreContent
	if rf, ok := ret.Get(0).(func(uint, contents.CoreContent) contents.CoreContent); ok {
		r0 = rf(userID, newContent)
	} else {
		r0 = ret.Get(0).(contents.CoreContent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, contents.CoreContent) error); ok {
		r1 = rf(userID, newContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllContent provides a mock function with given fields:
func (_m *ContentData) AllContent() ([]contents.CoreContent, error) {
	ret := _m.Called()

	var r0 []contents.CoreContent
	if rf, ok := ret.Get(0).(func() []contents.CoreContent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contents.CoreContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContent provides a mock function with given fields: userID, contentID
func (_m *ContentData) DeleteContent(userID uint, contentID uint) error {
	ret := _m.Called(userID, contentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, contentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetailContent provides a mock function with given fields: contentID
func (_m *ContentData) DetailContent(contentID uint) (interface{}, error) {
	ret := _m.Called(contentID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint) interface{}); ok {
		r0 = rf(contentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(contentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContent provides a mock function with given fields: userID, contentID, content
func (_m *ContentData) UpdateContent(userID uint, contentID uint, content string) (string, error) {
	ret := _m.Called(userID, contentID, content)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, uint, string) string); ok {
		r0 = rf(userID, contentID, content)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userID, contentID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewContentData interface {
	mock.TestingT
	Cleanup(func())
}

// NewContentData creates a new instance of ContentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContentData(t mockConstructorTestingTNewContentData) *ContentData {
	mock := &ContentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
